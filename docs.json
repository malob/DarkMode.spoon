[
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [
      {
        "def" : "DarkMode.setDarkMode([state])",
        "stripped_doc" : [
          "This function enables\/disables Dark Mode. When no parameter is given, it toggles Dark Mode.",
          ""
        ],
        "name" : "setDarkMode",
        "doc" : "This function enables\/disables Dark Mode. When no parameter is given, it toggles Dark Mode.\n\nParameters:\n * (Optional) state (Boolean) - Should be `true` to enable Dark Mode and `false` to disable it. If this parameter is omitted, Dark Mode will be toggled.",
        "notes" : [

        ],
        "signature" : "DarkMode.setDarkMode([state])",
        "type" : "Function",
        "returns" : [

        ],
        "desc" : "This function enables\/disables Dark Mode. When no parameter is given, it toggles Dark Mode.",
        "parameters" : [
          " * (Optional) state (Boolean) - Should be `true` to enable Dark Mode and `false` to disable it. If this parameter is omitted, Dark Mode will be toggled."
        ]
      }
    ],
    "Variable" : [

    ],
    "stripped_doc" : [

    ],
    "Deprecated" : [

    ],
    "desc" : "This spoon allow you to enable, disable, and toggle Dark Mode in macOS by doing the following respectively:",
    "type" : "Module",
    "Constructor" : [

    ],
    "items" : [
      {
        "def" : "DarkMode.setDarkMode([state])",
        "stripped_doc" : [
          "This function enables\/disables Dark Mode. When no parameter is given, it toggles Dark Mode.",
          ""
        ],
        "name" : "setDarkMode",
        "doc" : "This function enables\/disables Dark Mode. When no parameter is given, it toggles Dark Mode.\n\nParameters:\n * (Optional) state (Boolean) - Should be `true` to enable Dark Mode and `false` to disable it. If this parameter is omitted, Dark Mode will be toggled.",
        "notes" : [

        ],
        "signature" : "DarkMode.setDarkMode([state])",
        "type" : "Function",
        "returns" : [

        ],
        "desc" : "This function enables\/disables Dark Mode. When no parameter is given, it toggles Dark Mode.",
        "parameters" : [
          " * (Optional) state (Boolean) - Should be `true` to enable Dark Mode and `false` to disable it. If this parameter is omitted, Dark Mode will be toggled."
        ]
      },
      {
        "def" : "DarkMode:bindHotkeys(mapping) -> self",
        "stripped_doc" : [
          "Binds hotkey mappings for this spoon. Currently `toggleDarkMode` is the only availabe hotkey binding:",
          " * `DarkMode:bindHotkeys({ toggleDarkMode = {{\"cmd\", \"option\", \"ctrl\"}, \"d\"} })`",
          ""
        ],
        "name" : "bindHotkeys",
        "doc" : "Binds hotkey mappings for this spoon. Currently `toggleDarkMode` is the only availabe hotkey binding:\n * `DarkMode:bindHotkeys({ toggleDarkMode = {{\"cmd\", \"option\", \"ctrl\"}, \"d\"} })`\n\nParameters:\n * mapping (Table) - A table containing hotkey mappings.\n\nReturns:\n * Self",
        "notes" : [

        ],
        "signature" : "DarkMode:bindHotkeys(mapping) -> self",
        "type" : "Method",
        "returns" : [
          " * Self"
        ],
        "desc" : "Binds hotkey mappings for this spoon. Currently `toggleDarkMode` is the only availabe hotkey binding:",
        "parameters" : [
          " * mapping (Table) - A table containing hotkey mappings.",
          ""
        ]
      },
      {
        "def" : "DarkMode:setSchedule(onTime, offTime) -> self",
        "stripped_doc" : [
          "Sets the schedule on which Dark Mode is enabled\/disabled. `DarkMode:start()` needs to be called for new schedule to take effect before the currently active timer fires.",
          ""
        ],
        "name" : "setSchedule",
        "doc" : "Sets the schedule on which Dark Mode is enabled\/disabled. `DarkMode:start()` needs to be called for new schedule to take effect before the currently active timer fires.\n\nParameters:\n * onTime (String)  - Time of day when Dark Mode should be *enabled* in 24-hour time formatted as \"HH:MM:SS\" or \"HH:MM\", or the values \"sunrise\" or \"sunset\".\n * offTime (String) - Time of day when Dark Mode should be *disabled* in 24-hour time formatted as \"HH:MM:SS\" or \"HH:MM\", or the values \"sunrise\" or \"sunset\".\n\nReturns:\n * Self",
        "notes" : [

        ],
        "signature" : "DarkMode:setSchedule(onTime, offTime) -> self",
        "type" : "Method",
        "returns" : [
          " * Self"
        ],
        "desc" : "Sets the schedule on which Dark Mode is enabled\/disabled. `DarkMode:start()` needs to be called for new schedule to take effect before the currently active timer fires.",
        "parameters" : [
          " * onTime (String)  - Time of day when Dark Mode should be *enabled* in 24-hour time formatted as \"HH:MM:SS\" or \"HH:MM\", or the values \"sunrise\" or \"sunset\".",
          " * offTime (String) - Time of day when Dark Mode should be *disabled* in 24-hour time formatted as \"HH:MM:SS\" or \"HH:MM\", or the values \"sunrise\" or \"sunset\".",
          ""
        ]
      },
      {
        "def" : "DarkMode:start() -> self",
        "stripped_doc" : [
          "Start enabling\/disabling Dark Mode base on the schedule set using `DarkMode:setSchedule()`. By default, Dark Mode is enabled at sunset (`onTime`) and disabled at sunrise (`offTime`).",
          ""
        ],
        "name" : "start",
        "doc" : "Start enabling\/disabling Dark Mode base on the schedule set using `DarkMode:setSchedule()`. By default, Dark Mode is enabled at sunset (`onTime`) and disabled at sunrise (`offTime`).\n\nReturns:\n * Self",
        "notes" : [

        ],
        "signature" : "DarkMode:start() -> self",
        "type" : "Method",
        "returns" : [
          " * Self"
        ],
        "desc" : "Start enabling\/disabling Dark Mode base on the schedule set using `DarkMode:setSchedule()`. By default, Dark Mode is enabled at sunset (`onTime`) and disabled at sunrise (`offTime`).",
        "parameters" : [

        ]
      },
      {
        "def" : "DarkMode:stop() -> self",
        "stripped_doc" : [
          "Stops this spoon from enabling\/disabling Dark Mode on a schedule.",
          ""
        ],
        "name" : "stop",
        "doc" : "Stops this spoon from enabling\/disabling Dark Mode on a schedule.\n\nReturns:\n * Self",
        "notes" : [

        ],
        "signature" : "DarkMode:stop() -> self",
        "type" : "Method",
        "returns" : [
          " * Self"
        ],
        "desc" : "Stops this spoon from enabling\/disabling Dark Mode on a schedule.",
        "parameters" : [

        ]
      }
    ],
    "Method" : [
      {
        "def" : "DarkMode:setSchedule(onTime, offTime) -> self",
        "stripped_doc" : [
          "Sets the schedule on which Dark Mode is enabled\/disabled. `DarkMode:start()` needs to be called for new schedule to take effect before the currently active timer fires.",
          ""
        ],
        "name" : "setSchedule",
        "doc" : "Sets the schedule on which Dark Mode is enabled\/disabled. `DarkMode:start()` needs to be called for new schedule to take effect before the currently active timer fires.\n\nParameters:\n * onTime (String)  - Time of day when Dark Mode should be *enabled* in 24-hour time formatted as \"HH:MM:SS\" or \"HH:MM\", or the values \"sunrise\" or \"sunset\".\n * offTime (String) - Time of day when Dark Mode should be *disabled* in 24-hour time formatted as \"HH:MM:SS\" or \"HH:MM\", or the values \"sunrise\" or \"sunset\".\n\nReturns:\n * Self",
        "notes" : [

        ],
        "signature" : "DarkMode:setSchedule(onTime, offTime) -> self",
        "type" : "Method",
        "returns" : [
          " * Self"
        ],
        "desc" : "Sets the schedule on which Dark Mode is enabled\/disabled. `DarkMode:start()` needs to be called for new schedule to take effect before the currently active timer fires.",
        "parameters" : [
          " * onTime (String)  - Time of day when Dark Mode should be *enabled* in 24-hour time formatted as \"HH:MM:SS\" or \"HH:MM\", or the values \"sunrise\" or \"sunset\".",
          " * offTime (String) - Time of day when Dark Mode should be *disabled* in 24-hour time formatted as \"HH:MM:SS\" or \"HH:MM\", or the values \"sunrise\" or \"sunset\".",
          ""
        ]
      },
      {
        "def" : "DarkMode:start() -> self",
        "stripped_doc" : [
          "Start enabling\/disabling Dark Mode base on the schedule set using `DarkMode:setSchedule()`. By default, Dark Mode is enabled at sunset (`onTime`) and disabled at sunrise (`offTime`).",
          ""
        ],
        "name" : "start",
        "doc" : "Start enabling\/disabling Dark Mode base on the schedule set using `DarkMode:setSchedule()`. By default, Dark Mode is enabled at sunset (`onTime`) and disabled at sunrise (`offTime`).\n\nReturns:\n * Self",
        "notes" : [

        ],
        "signature" : "DarkMode:start() -> self",
        "type" : "Method",
        "returns" : [
          " * Self"
        ],
        "desc" : "Start enabling\/disabling Dark Mode base on the schedule set using `DarkMode:setSchedule()`. By default, Dark Mode is enabled at sunset (`onTime`) and disabled at sunrise (`offTime`).",
        "parameters" : [

        ]
      },
      {
        "def" : "DarkMode:stop() -> self",
        "stripped_doc" : [
          "Stops this spoon from enabling\/disabling Dark Mode on a schedule.",
          ""
        ],
        "name" : "stop",
        "doc" : "Stops this spoon from enabling\/disabling Dark Mode on a schedule.\n\nReturns:\n * Self",
        "notes" : [

        ],
        "signature" : "DarkMode:stop() -> self",
        "type" : "Method",
        "returns" : [
          " * Self"
        ],
        "desc" : "Stops this spoon from enabling\/disabling Dark Mode on a schedule.",
        "parameters" : [

        ]
      },
      {
        "def" : "DarkMode:bindHotkeys(mapping) -> self",
        "stripped_doc" : [
          "Binds hotkey mappings for this spoon. Currently `toggleDarkMode` is the only availabe hotkey binding:",
          " * `DarkMode:bindHotkeys({ toggleDarkMode = {{\"cmd\", \"option\", \"ctrl\"}, \"d\"} })`",
          ""
        ],
        "name" : "bindHotkeys",
        "doc" : "Binds hotkey mappings for this spoon. Currently `toggleDarkMode` is the only availabe hotkey binding:\n * `DarkMode:bindHotkeys({ toggleDarkMode = {{\"cmd\", \"option\", \"ctrl\"}, \"d\"} })`\n\nParameters:\n * mapping (Table) - A table containing hotkey mappings.\n\nReturns:\n * Self",
        "notes" : [

        ],
        "signature" : "DarkMode:bindHotkeys(mapping) -> self",
        "type" : "Method",
        "returns" : [
          " * Self"
        ],
        "desc" : "Binds hotkey mappings for this spoon. Currently `toggleDarkMode` is the only availabe hotkey binding:",
        "parameters" : [
          " * mapping (Table) - A table containing hotkey mappings.",
          ""
        ]
      }
    ],
    "Command" : [

    ],
    "Field" : [

    ],
    "doc" : "This spoon allow you to enable, disable, and toggle Dark Mode in macOS by doing the following respectively:\n * `DarkMode:setDarkMode(true)`\n * `DarkMode:setDarkMode(false)`\n * `DarkMode:setDarkMode()`\n\nAdditionally it can automatically enable\/disable Dark Mode based on a schedule. The default schedule is to enable Dark Mode at sunset, and to disable it at sunrise. Use `DarkMode:setSchedule()` to change the schedule. To enable the the schedule call `DarkMode:start()`.",
    "name" : "DarkMode"
  }
]