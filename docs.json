[
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [
      {
        "doc" : "Returns a boolean indicating whether Dark Mode is on or off.\n\nReturns:\n * (Bool) `true` if Dark Mode is on and `false` if it's off.",
        "stripped_doc" : [
          "Returns a boolean indicating whether Dark Mode is on or off.",
          ""
        ],
        "parameters" : [

        ],
        "name" : "isOn",
        "notes" : [

        ],
        "signature" : "DarkMode.isOn() -> Bool",
        "type" : "Function",
        "returns" : [
          " * (Bool) `true` if Dark Mode is on and `false` if it's off."
        ],
        "def" : "DarkMode.isOn() -> Bool",
        "desc" : "Returns a boolean indicating whether Dark Mode is on or off."
      }
    ],
    "Variable" : [
      {
        "doc" : "A table with two keys, `onAt` and `offAt`, who's values should both be functions that when called by this spoon return a table indicating the time today when Dark Mode should be turn on\/off respectivly.\n\nMessing around with `DarkMode.schedule` directly should only be done by adventurous programmers for whom `DarkMode:setSchedule()` isn't sufficient for their needs. To get a better understanding of the table the functions should return, have a look at the private function `timeFnGenerator()`.",
        "stripped_doc" : [
          "A table with two keys, `onAt` and `offAt`, who's values should both be functions that when called by this spoon return a table indicating the time today when Dark Mode should be turn on\/off respectivly.",
          "",
          "Messing around with `DarkMode.schedule` directly should only be done by adventurous programmers for whom `DarkMode:setSchedule()` isn't sufficient for their needs. To get a better understanding of the table the functions should return, have a look at the private function `timeFnGenerator()`."
        ],
        "parameters" : [

        ],
        "name" : "schedule",
        "notes" : [

        ],
        "signature" : "DarkMode.schedule (Table)",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "DarkMode.schedule (Table)",
        "desc" : "A table with two keys, `onAt` and `offAt`, who's values should both be functions that when called by this spoon return a table indicating the time today when Dark Mode should be turn on\/off respectivly."
      },
      {
        "doc" : "A function that's called every time Dark Mode is toggle by this spoon. The function provided should accept a boolean argument, which will be `true` when Dark Mode is enabled, and `false` when it's disabled.",
        "stripped_doc" : [
          "A function that's called every time Dark Mode is toggle by this spoon. The function provided should accept a boolean argument, which will be `true` when Dark Mode is enabled, and `false` when it's disabled."
        ],
        "parameters" : [

        ],
        "name" : "callbackFn",
        "notes" : [

        ],
        "signature" : "DarkMode.callbackFn (Function)",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "DarkMode.callbackFn (Function)",
        "desc" : "A function that's called every time Dark Mode is toggle by this spoon. The function provided should accept a boolean argument, which will be `true` when Dark Mode is enabled, and `false` when it's disabled."
      }
    ],
    "stripped_doc" : [

    ],
    "desc" : "This spoon allows you to enable, disable, and toggle Dark Mode, as well as automatically enable\/disable DarkMode based on a schedule. The default schedule enables Dark Mode at sunset and disables it at sunrise.",
    "Deprecated" : [

    ],
    "type" : "Module",
    "Constructor" : [

    ],
    "doc" : "This spoon allows you to enable, disable, and toggle Dark Mode, as well as automatically enable\/disable DarkMode based on a schedule. The default schedule enables Dark Mode at sunset and disables it at sunrise.",
    "Method" : [
      {
        "doc" : "Returns a boolean indicating whether Dark Mode will be enable\/disabled based on a schedule.\n\nReturns:\n * (Bool) `true` if the Dark Mode schedule is active and `false` if it's not.",
        "stripped_doc" : [
          "Returns a boolean indicating whether Dark Mode will be enable\/disabled based on a schedule.",
          ""
        ],
        "parameters" : [

        ],
        "name" : "isScheduleOn",
        "notes" : [

        ],
        "signature" : "DarkMode:isScheduleOn() -> Bool",
        "type" : "Method",
        "returns" : [
          " * (Bool) `true` if the Dark Mode schedule is active and `false` if it's not."
        ],
        "def" : "DarkMode:isScheduleOn() -> Bool",
        "desc" : "Returns a boolean indicating whether Dark Mode will be enable\/disabled based on a schedule."
      },
      {
        "doc" : "Gets the schedule for the current day.\n\nParameters:\n * (Optional) inUnixTime (Bool) - Setting this value to `true` will return the schedule times in unix time.\n\nReturns:\n * (Table) A table with two elements with keys, `onAt` and `offAt`, each of which is a table with keys, `time` and optionally `sunEvent`, where the later will be a string with a value of `\"sunrise\"` or `\"sunset\"` if the value for the `time` key corresponds to a sunrise or sunset time respectively.",
        "stripped_doc" : [
          "Gets the schedule for the current day.",
          ""
        ],
        "parameters" : [
          " * (Optional) inUnixTime (Bool) - Setting this value to `true` will return the schedule times in unix time.",
          ""
        ],
        "name" : "getSchedule",
        "notes" : [

        ],
        "signature" : "DarkMode:getSchedule([inUnixTime]) -> table",
        "type" : "Method",
        "returns" : [
          " * (Table) A table with two elements with keys, `onAt` and `offAt`, each of which is a table with keys, `time` and optionally `sunEvent`, where the later will be a string with a value of `\"sunrise\"` or `\"sunset\"` if the value for the `time` key corresponds to a sunrise or sunset time respectively."
        ],
        "def" : "DarkMode:getSchedule([inUnixTime]) -> table",
        "desc" : "Gets the schedule for the current day."
      },
      {
        "doc" : "Sets the schedule on which Dark Mode is enabled\/disabled.\n\nParameters:\n * onTime (String)  - Time of day when Dark Mode should be *enabled* in 24-hour time formatted as \"HH:MM:SS\" or \"HH:MM\", or the values `\"sunrise\"` or `\"sunset\"`.\n * offTime (String) - Time of day when Dark Mode should be *disabled* in 24-hour time formatted as \"HH:MM:SS\" or \"HH:MM\", or the values `\"sunrise\"` or `\"sunset\"`.\n\nReturns:\n * Self",
        "stripped_doc" : [
          "Sets the schedule on which Dark Mode is enabled\/disabled.",
          ""
        ],
        "parameters" : [
          " * onTime (String)  - Time of day when Dark Mode should be *enabled* in 24-hour time formatted as \"HH:MM:SS\" or \"HH:MM\", or the values `\"sunrise\"` or `\"sunset\"`.",
          " * offTime (String) - Time of day when Dark Mode should be *disabled* in 24-hour time formatted as \"HH:MM:SS\" or \"HH:MM\", or the values `\"sunrise\"` or `\"sunset\"`.",
          ""
        ],
        "name" : "setSchedule",
        "notes" : [

        ],
        "signature" : "DarkMode:setSchedule(onTime, offTime) -> Self",
        "type" : "Method",
        "returns" : [
          " * Self"
        ],
        "def" : "DarkMode:setSchedule(onTime, offTime) -> Self",
        "desc" : "Sets the schedule on which Dark Mode is enabled\/disabled."
      },
      {
        "doc" : "Turns Dark Mode on.\n\nReturns:\n * Self",
        "stripped_doc" : [
          "Turns Dark Mode on.",
          ""
        ],
        "parameters" : [

        ],
        "name" : "on",
        "notes" : [

        ],
        "signature" : "DarkMode:on() -> Self",
        "type" : "Method",
        "returns" : [
          " * Self"
        ],
        "def" : "DarkMode:on() -> Self",
        "desc" : "Turns Dark Mode on."
      },
      {
        "doc" : "Turns Dark Mode off.\n\nReturns:\n * Self",
        "stripped_doc" : [
          "Turns Dark Mode off.",
          ""
        ],
        "parameters" : [

        ],
        "name" : "off",
        "notes" : [

        ],
        "signature" : "DarkMode:off() -> Self",
        "type" : "Method",
        "returns" : [
          " * Self"
        ],
        "def" : "DarkMode:off() -> Self",
        "desc" : "Turns Dark Mode off."
      },
      {
        "doc" : "Toggles Dark Mode.\n\nReturns:\n * Self",
        "stripped_doc" : [
          "Toggles Dark Mode.",
          ""
        ],
        "parameters" : [

        ],
        "name" : "toggle",
        "notes" : [

        ],
        "signature" : "DarkMode:toggle() -> Self",
        "type" : "Method",
        "returns" : [
          " * Self"
        ],
        "def" : "DarkMode:toggle() -> Self",
        "desc" : "Toggles Dark Mode."
      },
      {
        "doc" : "Creates an `hs.settings` record for this spoon to use as cache for location and location cache expiry time. This cached location allows the spoon to keep functioning when the schedule includes a sunrise or sunset time and `hs.location.get()` can't get a location.\n\nReturns:\n * Self",
        "stripped_doc" : [
          "Creates an `hs.settings` record for this spoon to use as cache for location and location cache expiry time. This cached location allows the spoon to keep functioning when the schedule includes a sunrise or sunset time and `hs.location.get()` can't get a location.",
          ""
        ],
        "parameters" : [

        ],
        "name" : "init",
        "notes" : [

        ],
        "signature" : "DarkMode:init() -> Self",
        "type" : "Method",
        "returns" : [
          " * Self"
        ],
        "def" : "DarkMode:init() -> Self",
        "desc" : "Creates an `hs.settings` record for this spoon to use as cache for location and location cache expiry time. This cached location allows the spoon to keep functioning when the schedule includes a sunrise or sunset time and `hs.location.get()` can't get a location."
      },
      {
        "doc" : "Start enabling\/disabling Dark Mode based on the schedule set using `DarkMode:setSchedule()`. By default, Dark Mode is enabled at sunset (`onTime`) and disabled at sunrise (`offTime`).\n\nReturns:\n * Self",
        "stripped_doc" : [
          "Start enabling\/disabling Dark Mode based on the schedule set using `DarkMode:setSchedule()`. By default, Dark Mode is enabled at sunset (`onTime`) and disabled at sunrise (`offTime`).",
          ""
        ],
        "parameters" : [

        ],
        "name" : "start",
        "notes" : [

        ],
        "signature" : "DarkMode:start() -> Self",
        "type" : "Method",
        "returns" : [
          " * Self"
        ],
        "def" : "DarkMode:start() -> Self",
        "desc" : "Start enabling\/disabling Dark Mode based on the schedule set using `DarkMode:setSchedule()`. By default, Dark Mode is enabled at sunset (`onTime`) and disabled at sunrise (`offTime`)."
      },
      {
        "doc" : "Stops this spoon from enabling\/disabling Dark Mode on a schedule.\n\nReturns:\n * Self",
        "stripped_doc" : [
          "Stops this spoon from enabling\/disabling Dark Mode on a schedule.",
          ""
        ],
        "parameters" : [

        ],
        "name" : "stop",
        "notes" : [

        ],
        "signature" : "DarkMode:stop() -> Self",
        "type" : "Method",
        "returns" : [
          " * Self"
        ],
        "def" : "DarkMode:stop() -> Self",
        "desc" : "Stops this spoon from enabling\/disabling Dark Mode on a schedule."
      },
      {
        "doc" : "Binds hotkey mappings for this spoon.\n\nParameters:\n * mapping (Table) - A table with keys who's names correspond to methods of this spoon and values that represent hotkey mappings. For example:\n   * `{toggle = {{\"cmd\", \"option\", \"ctrl\"}, \"d\"}}`\n\nReturns:\n * Self",
        "stripped_doc" : [
          "Binds hotkey mappings for this spoon.",
          ""
        ],
        "parameters" : [
          " * mapping (Table) - A table with keys who's names correspond to methods of this spoon and values that represent hotkey mappings. For example:",
          "   * `{toggle = {{\"cmd\", \"option\", \"ctrl\"}, \"d\"}}`",
          ""
        ],
        "name" : "bindHotkeys",
        "notes" : [

        ],
        "signature" : "DarkMode:bindHotkeys(mapping) -> Self",
        "type" : "Method",
        "returns" : [
          " * Self"
        ],
        "def" : "DarkMode:bindHotkeys(mapping) -> Self",
        "desc" : "Binds hotkey mappings for this spoon."
      }
    ],
    "Command" : [

    ],
    "Field" : [

    ],
    "items" : [
      {
        "doc" : "A function that's called every time Dark Mode is toggle by this spoon. The function provided should accept a boolean argument, which will be `true` when Dark Mode is enabled, and `false` when it's disabled.",
        "stripped_doc" : [
          "A function that's called every time Dark Mode is toggle by this spoon. The function provided should accept a boolean argument, which will be `true` when Dark Mode is enabled, and `false` when it's disabled."
        ],
        "parameters" : [

        ],
        "name" : "callbackFn",
        "notes" : [

        ],
        "signature" : "DarkMode.callbackFn (Function)",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "DarkMode.callbackFn (Function)",
        "desc" : "A function that's called every time Dark Mode is toggle by this spoon. The function provided should accept a boolean argument, which will be `true` when Dark Mode is enabled, and `false` when it's disabled."
      },
      {
        "doc" : "A table with two keys, `onAt` and `offAt`, who's values should both be functions that when called by this spoon return a table indicating the time today when Dark Mode should be turn on\/off respectivly.\n\nMessing around with `DarkMode.schedule` directly should only be done by adventurous programmers for whom `DarkMode:setSchedule()` isn't sufficient for their needs. To get a better understanding of the table the functions should return, have a look at the private function `timeFnGenerator()`.",
        "stripped_doc" : [
          "A table with two keys, `onAt` and `offAt`, who's values should both be functions that when called by this spoon return a table indicating the time today when Dark Mode should be turn on\/off respectivly.",
          "",
          "Messing around with `DarkMode.schedule` directly should only be done by adventurous programmers for whom `DarkMode:setSchedule()` isn't sufficient for their needs. To get a better understanding of the table the functions should return, have a look at the private function `timeFnGenerator()`."
        ],
        "parameters" : [

        ],
        "name" : "schedule",
        "notes" : [

        ],
        "signature" : "DarkMode.schedule (Table)",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "DarkMode.schedule (Table)",
        "desc" : "A table with two keys, `onAt` and `offAt`, who's values should both be functions that when called by this spoon return a table indicating the time today when Dark Mode should be turn on\/off respectivly."
      },
      {
        "doc" : "Returns a boolean indicating whether Dark Mode is on or off.\n\nReturns:\n * (Bool) `true` if Dark Mode is on and `false` if it's off.",
        "stripped_doc" : [
          "Returns a boolean indicating whether Dark Mode is on or off.",
          ""
        ],
        "parameters" : [

        ],
        "name" : "isOn",
        "notes" : [

        ],
        "signature" : "DarkMode.isOn() -> Bool",
        "type" : "Function",
        "returns" : [
          " * (Bool) `true` if Dark Mode is on and `false` if it's off."
        ],
        "def" : "DarkMode.isOn() -> Bool",
        "desc" : "Returns a boolean indicating whether Dark Mode is on or off."
      },
      {
        "doc" : "Binds hotkey mappings for this spoon.\n\nParameters:\n * mapping (Table) - A table with keys who's names correspond to methods of this spoon and values that represent hotkey mappings. For example:\n   * `{toggle = {{\"cmd\", \"option\", \"ctrl\"}, \"d\"}}`\n\nReturns:\n * Self",
        "stripped_doc" : [
          "Binds hotkey mappings for this spoon.",
          ""
        ],
        "parameters" : [
          " * mapping (Table) - A table with keys who's names correspond to methods of this spoon and values that represent hotkey mappings. For example:",
          "   * `{toggle = {{\"cmd\", \"option\", \"ctrl\"}, \"d\"}}`",
          ""
        ],
        "name" : "bindHotkeys",
        "notes" : [

        ],
        "signature" : "DarkMode:bindHotkeys(mapping) -> Self",
        "type" : "Method",
        "returns" : [
          " * Self"
        ],
        "def" : "DarkMode:bindHotkeys(mapping) -> Self",
        "desc" : "Binds hotkey mappings for this spoon."
      },
      {
        "doc" : "Gets the schedule for the current day.\n\nParameters:\n * (Optional) inUnixTime (Bool) - Setting this value to `true` will return the schedule times in unix time.\n\nReturns:\n * (Table) A table with two elements with keys, `onAt` and `offAt`, each of which is a table with keys, `time` and optionally `sunEvent`, where the later will be a string with a value of `\"sunrise\"` or `\"sunset\"` if the value for the `time` key corresponds to a sunrise or sunset time respectively.",
        "stripped_doc" : [
          "Gets the schedule for the current day.",
          ""
        ],
        "parameters" : [
          " * (Optional) inUnixTime (Bool) - Setting this value to `true` will return the schedule times in unix time.",
          ""
        ],
        "name" : "getSchedule",
        "notes" : [

        ],
        "signature" : "DarkMode:getSchedule([inUnixTime]) -> table",
        "type" : "Method",
        "returns" : [
          " * (Table) A table with two elements with keys, `onAt` and `offAt`, each of which is a table with keys, `time` and optionally `sunEvent`, where the later will be a string with a value of `\"sunrise\"` or `\"sunset\"` if the value for the `time` key corresponds to a sunrise or sunset time respectively."
        ],
        "def" : "DarkMode:getSchedule([inUnixTime]) -> table",
        "desc" : "Gets the schedule for the current day."
      },
      {
        "doc" : "Creates an `hs.settings` record for this spoon to use as cache for location and location cache expiry time. This cached location allows the spoon to keep functioning when the schedule includes a sunrise or sunset time and `hs.location.get()` can't get a location.\n\nReturns:\n * Self",
        "stripped_doc" : [
          "Creates an `hs.settings` record for this spoon to use as cache for location and location cache expiry time. This cached location allows the spoon to keep functioning when the schedule includes a sunrise or sunset time and `hs.location.get()` can't get a location.",
          ""
        ],
        "parameters" : [

        ],
        "name" : "init",
        "notes" : [

        ],
        "signature" : "DarkMode:init() -> Self",
        "type" : "Method",
        "returns" : [
          " * Self"
        ],
        "def" : "DarkMode:init() -> Self",
        "desc" : "Creates an `hs.settings` record for this spoon to use as cache for location and location cache expiry time. This cached location allows the spoon to keep functioning when the schedule includes a sunrise or sunset time and `hs.location.get()` can't get a location."
      },
      {
        "doc" : "Returns a boolean indicating whether Dark Mode will be enable\/disabled based on a schedule.\n\nReturns:\n * (Bool) `true` if the Dark Mode schedule is active and `false` if it's not.",
        "stripped_doc" : [
          "Returns a boolean indicating whether Dark Mode will be enable\/disabled based on a schedule.",
          ""
        ],
        "parameters" : [

        ],
        "name" : "isScheduleOn",
        "notes" : [

        ],
        "signature" : "DarkMode:isScheduleOn() -> Bool",
        "type" : "Method",
        "returns" : [
          " * (Bool) `true` if the Dark Mode schedule is active and `false` if it's not."
        ],
        "def" : "DarkMode:isScheduleOn() -> Bool",
        "desc" : "Returns a boolean indicating whether Dark Mode will be enable\/disabled based on a schedule."
      },
      {
        "doc" : "Turns Dark Mode off.\n\nReturns:\n * Self",
        "stripped_doc" : [
          "Turns Dark Mode off.",
          ""
        ],
        "parameters" : [

        ],
        "name" : "off",
        "notes" : [

        ],
        "signature" : "DarkMode:off() -> Self",
        "type" : "Method",
        "returns" : [
          " * Self"
        ],
        "def" : "DarkMode:off() -> Self",
        "desc" : "Turns Dark Mode off."
      },
      {
        "doc" : "Turns Dark Mode on.\n\nReturns:\n * Self",
        "stripped_doc" : [
          "Turns Dark Mode on.",
          ""
        ],
        "parameters" : [

        ],
        "name" : "on",
        "notes" : [

        ],
        "signature" : "DarkMode:on() -> Self",
        "type" : "Method",
        "returns" : [
          " * Self"
        ],
        "def" : "DarkMode:on() -> Self",
        "desc" : "Turns Dark Mode on."
      },
      {
        "doc" : "Sets the schedule on which Dark Mode is enabled\/disabled.\n\nParameters:\n * onTime (String)  - Time of day when Dark Mode should be *enabled* in 24-hour time formatted as \"HH:MM:SS\" or \"HH:MM\", or the values `\"sunrise\"` or `\"sunset\"`.\n * offTime (String) - Time of day when Dark Mode should be *disabled* in 24-hour time formatted as \"HH:MM:SS\" or \"HH:MM\", or the values `\"sunrise\"` or `\"sunset\"`.\n\nReturns:\n * Self",
        "stripped_doc" : [
          "Sets the schedule on which Dark Mode is enabled\/disabled.",
          ""
        ],
        "parameters" : [
          " * onTime (String)  - Time of day when Dark Mode should be *enabled* in 24-hour time formatted as \"HH:MM:SS\" or \"HH:MM\", or the values `\"sunrise\"` or `\"sunset\"`.",
          " * offTime (String) - Time of day when Dark Mode should be *disabled* in 24-hour time formatted as \"HH:MM:SS\" or \"HH:MM\", or the values `\"sunrise\"` or `\"sunset\"`.",
          ""
        ],
        "name" : "setSchedule",
        "notes" : [

        ],
        "signature" : "DarkMode:setSchedule(onTime, offTime) -> Self",
        "type" : "Method",
        "returns" : [
          " * Self"
        ],
        "def" : "DarkMode:setSchedule(onTime, offTime) -> Self",
        "desc" : "Sets the schedule on which Dark Mode is enabled\/disabled."
      },
      {
        "doc" : "Start enabling\/disabling Dark Mode based on the schedule set using `DarkMode:setSchedule()`. By default, Dark Mode is enabled at sunset (`onTime`) and disabled at sunrise (`offTime`).\n\nReturns:\n * Self",
        "stripped_doc" : [
          "Start enabling\/disabling Dark Mode based on the schedule set using `DarkMode:setSchedule()`. By default, Dark Mode is enabled at sunset (`onTime`) and disabled at sunrise (`offTime`).",
          ""
        ],
        "parameters" : [

        ],
        "name" : "start",
        "notes" : [

        ],
        "signature" : "DarkMode:start() -> Self",
        "type" : "Method",
        "returns" : [
          " * Self"
        ],
        "def" : "DarkMode:start() -> Self",
        "desc" : "Start enabling\/disabling Dark Mode based on the schedule set using `DarkMode:setSchedule()`. By default, Dark Mode is enabled at sunset (`onTime`) and disabled at sunrise (`offTime`)."
      },
      {
        "doc" : "Stops this spoon from enabling\/disabling Dark Mode on a schedule.\n\nReturns:\n * Self",
        "stripped_doc" : [
          "Stops this spoon from enabling\/disabling Dark Mode on a schedule.",
          ""
        ],
        "parameters" : [

        ],
        "name" : "stop",
        "notes" : [

        ],
        "signature" : "DarkMode:stop() -> Self",
        "type" : "Method",
        "returns" : [
          " * Self"
        ],
        "def" : "DarkMode:stop() -> Self",
        "desc" : "Stops this spoon from enabling\/disabling Dark Mode on a schedule."
      },
      {
        "doc" : "Toggles Dark Mode.\n\nReturns:\n * Self",
        "stripped_doc" : [
          "Toggles Dark Mode.",
          ""
        ],
        "parameters" : [

        ],
        "name" : "toggle",
        "notes" : [

        ],
        "signature" : "DarkMode:toggle() -> Self",
        "type" : "Method",
        "returns" : [
          " * Self"
        ],
        "def" : "DarkMode:toggle() -> Self",
        "desc" : "Toggles Dark Mode."
      }
    ],
    "name" : "DarkMode"
  }
]